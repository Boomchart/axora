<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Traits\Uuid;
use Illuminate\Database\Eloquent\SoftDeletes;
use Services\Cachable\ModelCaching\Traits\Cachable;
use Illuminate\Support\Facades\Cache;
use Carbon\Carbon;

class Category extends Model
{
    use HasFactory, Uuid, SoftDeletes, Cachable;

    protected $fillable = [
        'name',
        'slug',
        'status',
        'type',
        'card_type',
        'receipt',
        'icon',
        'description',
        'state_id',
        'amount',
        'rate',
        'profit_rate',
        'discount',
        'image',
        'interest',
        'user_id',
        'cat_id',
        'plan_id',
        'country_id',
        'min',
        'max',
        'fc',
        'pc',
        'pct',
        'requirements',
        'edited_by',
        'created_by',
        'auto_rate',
        'margin',
        'low_stock_alert',
        'stock',
        'coupon_limit',
        'coupon_used',
        'coupon_code',
        'slogan',
        'mcc_code'
    ];

    public function withdrawTrx()
    {
        return $this->hasMany(Transactions::class, 'withdraw_id');
    }

    public function articles()
    {
        return $this->hasMany(Blog::class, 'cat_id');
    }

    public function faq()
    {
        return $this->hasMany(HelpCenter::class, 'cat_id');
    }

    public function state()
    {
        return $this->belongsTo(State::class, 'state_id');
    }

    public function user()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function sellGiftcard()
    {
        return $this->belongsTo(SellCard::class, 'cat_id');
    }

    public function buyGiftcard()
    {
        return $this->belongsTo(BuyCard::class, 'cat_id');
    }

    public function country()
    {
        return $this->belongsTo(Country::class, 'country_id');
    }

    public function autoGeneratedCards()
    {
        return $this->hasMany(CardCodes::class, 'rate_id')->whereMode('live')->whereAutoGenerated(1);
    }

    public function activeCards()
    {
        return $this->hasMany(CardCodes::class, 'rate_id')->whereMode('live')->whereRedeemed(0)->wherePurchased(0);
    }

    public function redeemedCards()
    {
        return $this->hasMany(CardCodes::class, 'rate_id')->whereMode('live')->whereRedeemed(1)->wherePurchased(1);
    }

    public function rateCountry()
    {
        return $this->belongsTo(Category::class, 'country_id')->whereType('giftcard_buy_country')->withTrashed();
    }

    public function getBrands()
    {
        return $this->hasMany(Category::class, 'cat_id')->whereType('buy_card_category');
    }

    public function cardSold($type = null, $duration = null)
    {
        $value = Cache::remember('cardSold' . $this->id . $type . $duration, 600, function () use ($type, $duration) {
            if ($duration == null) {
                $charge = Transactions::whereType('giftcard_purchase')->whereMode('live')->whereBuyCardRateId($this->id)->whereStatus('success');
            } else {
                if ($duration == 'today') {
                    $charge = Transactions::whereType('giftcard_purchase')->whereMode('live')->whereBuyCardRateId($this->id)->whereStatus('success')->whereDate('created_at', Carbon::today());
                } elseif ($duration == 'week') {
                    $charge = Transactions::whereType('giftcard_purchase')->whereMode('live')->whereBuyCardRateId($this->id)->whereStatus('success')->whereBetween('created_at', [Carbon::now()->startOfWeek(), Carbon::now()->endOfWeek()]);
                } elseif ($duration == 'month') {
                    $charge = Transactions::whereType('giftcard_purchase')->whereMode('live')->whereBuyCardRateId($this->id)->whereStatus('success')->whereMonth('created_at', '=', date('m'))->whereYear('created_at', '=', date('Y'));
                } elseif ($duration == 'year') {
                    $charge = Transactions::whereType('giftcard_purchase')->whereMode('live')->whereBuyCardRateId($this->id)->whereStatus('success')->whereYear('created_at', '=', date('Y'));
                }
            }
            return [$charge->sum('amount'), $charge->count()];
        });
        return $value;
    }

    public function rates()
    {
        return $this->hasMany(Category::class, 'country_id')->whereType('giftcard_buy_rate')->withCount(['autoGeneratedCards', 'activeCards', 'redeemedCards'])->orderBy('amount', 'asc');
    }

    public function createdBy()
    {
        return $this->belongsTo(Admin::class, 'created_by')->withTrashed();
    }

    public function editedBy()
    {
        return $this->belongsTo(Admin::class, 'edited_by')->withTrashed();
    }
}
